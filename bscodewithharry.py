# -*- coding: utf-8 -*-
"""BSCodeWithHarry.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NODo-AeFS1qUTiQ7Ta78HM0Co7yMV6g6

Step 0: Set Up environment
"""

pip install requests

pip install html5lib

pip install bs4

# Commented out IPython magic to ensure Python compatibility.
import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import smtplib
import seaborn as sns
# %matplotlib inline

from bs4 import BeautifulSoup

url="https://www.alibaba.com/product-detail/Newest-Nepal-copper-beads-Tibetan-inlay_62035851052.html"

"""Step 1 : Get the HTML"""

r=requests.get(url)
htmlContent=r.content
print(htmlContent)

"""Step 2 : Parse the HTML"""

soup=BeautifulSoup(htmlContent,'html.parser')
print(soup.prettify)

print(soup.title.name)
print(soup.title.string)
print(soup.title.parent)
print(soup.title.parents.name)
print(soup.p)

print(soup.title.parent.name)

"""Step 3: HTML Tree Traversal"""

title=soup.title
print(title)

title.string.replace_with('New Copper Beads')
title

print(type(title))

print(type(title.string))

print(type(title.parent.name))

"""Commonly Used Types Of Objects in Bs4
1. Tag
2. NavigableString
3. BeautifulSoup
4. Comments
"""

print(type(title))
print(type(title.string))
print(type(soup))

"""print all parargraphs and anchor tags"""

para=soup.findAll('p')
print(para)

anchor=soup.findAll('a')
print(anchor)

"""print parargraphs line by line"""

for parargraph in soup.findAll('p'):
  
  #print(parargraph.string)
  print(str(parargraph.text))

for url in soup.findAll('a'):
  if ((url.get('href'))!=None):
    print(url.get('href'))

#a2700.wholesale.maonnacta.i0.489f631bi28ZjC
print (soup.find('span')[class='priceVal'])
a.get_text()

soup.a['class']

soup.string

"""print first anchor"""

print(soup.find('a'))

print(soup.find('a')['class']) #displays class

#display all elements of anchor  with class 'navbar-brand'
print (soup.findAll('a',class_='navbar-brand'))

print(soup.find('p').get_text()) #Get the texts from the tag

print(soup.get_text())

for links in anchor: #Get all the links on the page
  print (links.get('href'))

"""but the links are repeated and cannot be used for jumping in websites so lets make an empty set"""

anchor=soup.findAll('a')
alllinks=set()
for link in anchor:
  if (link!='#'):
    alllinks.add("https://codewithharry.com" link.get('href'))



print(alllinks)



elem=soup.select('#loginModal')# use of css id
print(elem)

soup.body.a.i

soup.body.a.i['class']

soup.body.find_all('a')

"""<title[link text](https://)>answer</title>
.string-->answer
.stripped_strings removes the extra spaces ie /n
1. html tags parent tag is BeautifulSoup itself
2. parent of BeautifulSoup is None


```
"""

soup.find_all(['a','b']) #finding a list

soup.find_all('span','priceVal')#(tag having specified class)

a=soup.find('span','priceVal')
price=a.get_text() #/a.string
s=price[1:10]
s
#price[1]

if (a.string==6.50):
  print (True)
else:
  print(False)

b= soup.find(title='$4.25')#find_all use garda .string use garna mildaina
b.string

#Searching by CSS Class
#soup.find_all('span',class_='priceVal')
soup.find_all(class_='priceVal')

#use CSS selectors to search for tags that match two or more CSS classes
#css_soup.select("p.strikeout.body")
# [<p class="body strikeout"></p>]
#class ko satta string lekhyo vane string search garne

